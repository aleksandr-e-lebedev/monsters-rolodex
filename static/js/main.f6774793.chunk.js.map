{"version":3,"sources":["components/Search/Search.jsx","components/Card/Card.jsx","components/CardList/CardList.jsx","App.js","serviceWorker.js","index.js"],"names":["Search","placeholder","value","handleChange","className","type","onChange","Card","monster","src","id","alt","name","email","CardList","monsters","map","key","App","e","setState","searchField","target","state","fetch","res","json","users","this","filteredMonsters","filter","toLowerCase","includes","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6WAKe,SAASA,EAAT,GAAuD,IAArCC,EAAoC,EAApCA,YAAaC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,aACnD,OACE,2BACEC,UAAU,SACVC,KAAK,SACLJ,YAAaA,EACbC,MAAOA,EACPI,SAAUH,I,MCPD,SAASI,EAAT,GAA4B,IAAZC,EAAW,EAAXA,QAC7B,OACE,yBAAKJ,UAAU,QACb,yBACEK,IAAG,+BAA0BD,EAAQE,GAAlC,0BACHC,IAAI,YAEN,4BAAKH,EAAQI,MACb,2BAAIJ,EAAQK,Q,MCNH,SAASC,EAAT,GAAiC,IAAbC,EAAY,EAAZA,SACjC,OACE,yBAAKX,UAAU,aACZW,EAASC,KAAI,SAACR,GAAD,OACZ,kBAACD,EAAD,CAAMU,IAAKT,EAAQE,GAAIF,QAASA,Q,UCJnBU,E,kDACnB,aAAe,IAAD,8BACZ,gBAiBFf,aAAe,SAACgB,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOpB,SAhBtC,EAAKqB,MAAQ,CACXR,SAAU,GACVM,YAAa,IALH,E,kMAUMG,MAAM,8C,cAAlBC,E,gBACcA,EAAIC,O,OAAlBC,E,OAENC,KAAKR,SAAS,CACZL,SAAUY,I,qIAQJ,IAAD,EAC2BC,KAAKL,MAA/BR,EADD,EACCA,SAAUM,EADX,EACWA,YACZQ,EAAmBd,EAASe,QAAO,SAACtB,GAAD,OACvCA,EAAQI,KAAKmB,cAAcC,SAASX,EAAYU,kBAGlD,OACE,yBAAK3B,UAAU,OACb,gDACA,kBAACJ,EAAD,CACEC,YAAY,kBACZC,MAAOmB,EACPlB,aAAcyB,KAAKzB,eAErB,kBAACW,EAAD,CAAUC,SAAUc,S,GArCKI,IAAMC,WCKnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f6774793.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './search.css';\r\n\r\nexport default function Search({ placeholder, value, handleChange }) {\r\n  return (\r\n    <input\r\n      className=\"search\"\r\n      type=\"search\"\r\n      placeholder={placeholder}\r\n      value={value}\r\n      onChange={handleChange}\r\n    />\r\n  );\r\n}\r\n\r\nSearch.propTypes = {\r\n  placeholder: PropTypes.string.isRequired,\r\n  value: PropTypes.string.isRequired,\r\n  handleChange: PropTypes.func.isRequired,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './card.css';\r\n\r\nexport default function Card({ monster }) {\r\n  return (\r\n    <div className=\"card\">\r\n      <img\r\n        src={`https://robohash.org/${monster.id}?set=set2&size=180x180`}\r\n        alt=\"monster\"\r\n      />\r\n      <h2>{monster.name}</h2>\r\n      <p>{monster.email}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nCard.propTypes = {\r\n  monster: PropTypes.shape({\r\n    name: PropTypes.string.isRequired,\r\n    id: PropTypes.number.isRequired,\r\n    email: PropTypes.string.isRequired,\r\n  }).isRequired,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Card from '../Card/Card';\r\n\r\nimport './card-list.css';\r\n\r\nexport default function CardList({ monsters }) {\r\n  return (\r\n    <div className=\"card-list\">\r\n      {monsters.map((monster) => (\r\n        <Card key={monster.id} monster={monster} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nCardList.propTypes = {\r\n  monsters: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n};\r\n","import React from 'react';\n\nimport Search from './components/Search/Search';\nimport CardList from './components/CardList/CardList';\n\nimport './App.css';\n\nexport default class App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: '',\n    };\n  }\n\n  async componentDidMount() {\n    const res = await fetch('https://jsonplaceholder.typicode.com/users');\n    const users = await res.json();\n\n    this.setState({\n      monsters: users,\n    });\n  }\n\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value });\n  };\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter((monster) =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <Search\n          placeholder=\"search monsters\"\n          value={searchField}\n          handleChange={this.handleChange}\n        />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}